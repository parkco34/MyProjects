import pandas as pd
from datetime import datetime
import glob
import os
import pyautogui as auto
import Data as data

# Expands data visibility in python terminal
pd.options.mode.chained_assignment = None
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 200)
pd.set_option('display.width', 600)


class Updates:

    def __init__(self, raw_data=None):
        self.user = os.getlogin()
        self.raw_data = raw_data

        self.file_path = "C:\\Users\\" + self.user + r"\Desktop\UPDATES"

        """ Retrieve raw raw_data from file path and formats it in a DatFrame """
        try:

            if not os.path.exists(self.file_path):
                print("Making Directory in: " + self.file_path)
                auto.alert(f"Creating directory at: {self.file_path}", "CORY WANTS YOU TO KNOW...")
                os.mkdir(self.file_path)

            else:
                print(f"Directory: {self.file_path}.")

        except TypeError as _err:
            self.file_path = auto.prompt(text="No file path found.\nPlease enter the full file path to your data",
                                         title="FILE PATH REQUIRED")

        list_of_files = glob.glob(self.file_path + "\\*")
        # max(iterable, *[, default=obj, key=func])
        self.file_path = max(list_of_files, key=self.modification_date)

        if self.file_path.endswith('.csv'):
            self.raw_data = pd.read_csv(self.file_path)

        elif self.file_path.endswith('.xlsx'):
            self.raw_data = pd.read_excel(self.file_path)

        elif self.file_path.endswith('.txt'):
            with open(self.file_path, 'a+') as file:
                self.raw_data = file.read()

        else:
            self.file_path = auto.prompt(text="SOMETHING WENT WRONG...\nPlease enter the full file path of your raw data",
                                         title="File Path Required")

            if self.file_path.endswith('.csv'):
                self.raw_data = pd.read_csv(self.file_path)

            elif self.file_path.endswith('.xlsx'):
                self.raw_data = pd.read_excel(self.file_path)

            elif self.file_path.endswith('.txt'):
                with open(self.file_path, 'r') as file:
                    self.raw_data = file.read()

            else:
                auto.alert("Losiento...", "ERROR OCCURRED!\nFind Cory and have him solve the problem.")

    # I initialized the variable file_name
    def __str__(self, file_name=None):
        if self.file_path:
            file_name = self.file_path.split('\\')[-1]

        return f"File Name: {file_name}."

    """ Function to get to latest file modified in the directory """

    @staticmethod
    def modification_date(file_loc):
        t = os.path.getmtime(file_loc)
        return datetime.fromtimestamp(t)

raw = Updates()
df = raw.raw_data

#dframe = data.convert_to_date('Min Model Year', 'Max Model Year', add_thing='-01-01', floater=True)

