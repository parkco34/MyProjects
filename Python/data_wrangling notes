#! bin/env/python

import pandas as pd
import numpy as np

def column_to_string(dataframe, *column_list):
    for i in dataframe[([*column_list])]:
        dataframe[i] = dataframe[i].astype(str)
        return dataframe


# If there's a decimal in the column values, round down and convert to integer, else if something needs to be added to the values a target columns, else if you need to change Int64 type to datetime types...
def modify_column_values(dataframe, *column_list, add_thing=None, floater=False, time_change=False):
    if floater:
        # If type FLOAT, round down and change type to STRING
        for na in dataframe[([*column_list])]:
            if len([*column_list]) > 1:
                dataframe = dataframe[dataframe[na].notna()]
                dataframe.loc[:, na] = dataframe[na].astype(int)
                dataframe.loc[:, na] = dataframe[na].astype(str) + add_thing
                dataframe[na] = pd.to_datetime(dataframe[na], format='%Y%m%d')

            else:
                dataframe = dataframe[dataframe[na].notna()]
                dataframe.loc[:, na] = dataframe[na].astype(int)
                dataframe.loc[:, na] = dataframe[na].astype(str) + add_thing
                dataframe[na] = pd.to_datetime(dataframe[na], format='%Y%m%d')

        return dataframe

    elif time_change:
        for na in dataframe[([*column_list])]:
            dataframe[na] = dataframe[na].astype('datetime64[ns]')
            return dataframe


# To replace locations with more concise nomenclature
def replace_column_values(dataframe, column_name, *new_values):
    for val in new_values:
        dataframe.loc[dataframe[column_name].str.contains(val, na=False), column_name] = val


# Finds percent of missing values
def missing_values(dataframe):
    percent_missing = dataframe.isnull().sum() * 100 / len(dataframe)
    missing_values_df = pd.DataFrame({'column_name': dataframe.columns,
                                      'percent_missing': percent_missing})
    missing_values_df.sort_values('percent_missing', ascending=False, inplace=True)
    return missing_values_df


# Make sure target variable is standardized
def set_column_lowercase(dataframe, column_name):
    dataframe[column_name] = dataframe[column_name].map(lambda x: x.lower())
