import os
import pandas as pd
import win32api
import pyautogui as auto
import glob
from datetime import datetime

# Expands data visibility in python terminal
pd.options.mode.chained_assignment = None
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 200)
pd.set_option('display.width', 600)


class Data:
    user = os.getlogin()

    def __init__(self, file_path=None, data=None):
        self.file_path = file_path
        self.data = data

    """ Retrieve raw data from file path and formats it in a DatFrame """
    def get_file(self):
        self.file_path = "C:\\Users\\" + user + r"\Desktop\UPDATES"

        try:

            if not os.path.exists(self.file_path):
                print("Making Directory in: " + self.file_path)
                auto.alert(f"Creating directory at: {self.file_path}", "CORY WANTS YOU TO KNOW...")
                os.mkdir(self.file_path)

            else:
                print("Required Directory Exists.")

        except TypeError as err:
            self.file_path = auto.prompt(text="No file path found.\nPlease enter the full file path to your data",
                                        title="FILE PATH REQUIRED")

        list_of_files = glob.glob(self.file_path + "\\*")
        # max(iterable, *[, default=obj, key=func])
        self.file_path = max(list_of_files, key=self.modification_date)

        if self.file_path.endswith('.csv'):
            self.data = pd.read_csv(self.file_path)

            return self.data

        elif self.file_path.endswith('.xlsx'):
            self.data = pd.read_excel(self.file_path)

            return self.data

        elif self.file_path.endswith('.txt'):
            with open(self.file_path, 'a+') as file:
                self.data = file.read()

                return self.data

        else:
            self.file_path = auto.prompt(text="SOMETHING WENT WRONG...\nPlease enter the full file path of your data",
                                   title="File Path Required")

            if self.file_path.endswith('.csv'):
                self.data = pd.read_csv(self.file_path)

                return

            elif self.file_path.endswith('.xlsx'):
                self.data = pd.read_excel(self.file_path)
            elif the_pat.endswith('.txt'):
                with open(self.file_path, 'r') as file:
                    self.data = file.read()

            else:
                auto.alert("Losiento...", "ERROR OCCURRED!\nFind Cory and have him solve the problem.")

    """ Function to get to latest file modified in the directory """
    @staticmethod
    def modification_date(file_loc):
        t = os.path.getmtime(file_loc)
        return datetime.fromtimestamp(t)

    def __str__(self):
        if self.file_path:
            file_name = self.file_path.split('\\')[-1]
        return f"File Name: {file_name}."

    """ Convert appropriate columns to datetime data types as just the YEAR """
    def convert_to_date(self, *column_list, add_thing=None, floater=False, time_change=False):
        if floater:
            # If type FLOAT, round down and change type to STRING
            for na in self.data[([*column_list])]:
                if len([*column_list]) > 1:
                    self.data = self.data[self.data[na].notna()]
                    self.data.loc[:, na] = self.data[na].astype(int)
                    self.data.loc[:, na] = self.data[na].astype(str) + add_thing
                    self.data[na] = self.data[na].apply(lambda _: datetime.strptime(_, '%Y-%m-%d').date().year)

                else:
                    self.data = self.data[self.data[na].notna()]
                    self.data.loc[:, na] = self.data[na].astype(int)
                    self.data.loc[:, na] = self.data[na].astype(str) + add_thing
                    self.data[na] = self.data[na].apply(lambda _: datetime.strptime(_, '%Y-%m-%d').date().year)

            return self.data

        elif time_change:
            for na in self.data[([*column_list])]:
                self.data[na] = self.data[na].astype('datetime64[ns]')
                return self.data

    def reverse_blend(self, dframe):
        dframe = self.data.copy()
        dframe['Blended Coverage'] = dframe['Blended Coverage'].apply(lambda x: (-1 * x + 100) / 100)

        return dframe

    ''' Normalizing attributes, the closer to one the better the ranking, the closer to zero, the worse the ranking '''
    def min_max_scaling(self, dframe, *columns):
        dframe = self.data.copy()
        colz = list(columns)

        for col in colz:
            dframe[col] = (dframe[col] - dframe[col].min()) / (dframe[col].max() - dframe[col].min())

        return dframe
