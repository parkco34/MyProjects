import pandas as pd
from datetime import datetime
import tkinter as tk

pd.options.mode.chained_assignment = None
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 200)
pd.set_option('display.width', 600)

# locations = 'FARMINGTON', 'MAIN', 'HENRIETTA', 'GREECE', 'ERIE', 'IRONDEQUOIT', 'KENMORE', 'BUFFALO', 'ELMIRA'

# Finds percent of missing values
def missing_values(dataframe):
    percent_missing = dataframe.isnull().sum() * 100 / len(dataframe)
    missing_values_df = pd.DataFrame({'column_name': dataframe.columns,
                                      'percent_missing': percent_missing})
    missing_values_df.sort_values('percent_missing', ascending=False, inplace=True)
    return missing_values_df


''' If there's a decimal in the column values, round down and convert to integer, else if something needs to be added 
to the values a target columns, else if you need to change Int64 type to datetime types... '''
def modify_column_values(dataframe, *column_list, add_thing=None, floater=False, time_change=False):
    if floater:
        # If type FLOAT, round down and change type to STRING
        for na in dataframe[([*column_list])]:
            if len([*column_list]) > 1:
                dataframe = dataframe[dataframe[na].notna()]
                dataframe.loc[:, na] = dataframe[na].astype(int)
                dataframe.loc[:, na] = dataframe[na].astype(str) + add_thing
                dataframe[na] = dataframe[na].apply(lambda _: datetime.strptime(_, '%Y-%m-%d').date())

            else:
                dataframe = dataframe[dataframe[na].notna()]
                dataframe.loc[:, na] = dataframe[na].astype(int)
                dataframe.loc[:, na] = dataframe[na].astype(str) + add_thing
                dataframe[na] = dataframe[na].apply(lambda _: datetime.strptime(_, '%Y-%m-%d').date())

        return dataframe

    elif time_change:
        for na in dataframe[([*column_list])]:
            dataframe[na] = dataframe[na].astype('datetime64[ns]')
            return dataframe


# To replace locations with more concise nomenclature
def replace_column_values(dataframe, column_name, *new_values):
    for val in new_values:
        dataframe.loc[dataframe[column_name].str.contains(val, na=False), column_name] = val

df = pd.read_csv(r'C:\Users\cparker\Desktop\Copy of REID DDG BOS SHOES .csv',
                 usecols=['Location', 'Part', 'WD COST', 'Last 12 Mo Sales',
       'Inv Demand YTD+LY', 'Local Experian VIO', 'Local Vista Demand',
       'Alliance DW Region', 'Blended Coverage', 'Tool Action', 'Manual', 'Min Model Year', 'Max Model Year'])

# Dealing with missing values
df['Manual'] = df['Manual'].str.lower().fillna('')
df[['Last 12 Mo Sales', 'Local Experian VIO', 'Local Vista Demand', 'Alliance DW Region']] = df[['Last 12 Mo Sales',
                                            'Local Experian VIO', 'Local Vista Demand', 'Alliance DW Region']].fillna(0)
# Proper Datetimes
df = modify_column_values(df, 'Min Model Year', 'Max Model Year', add_thing='-01-01', floater=True)
# Simplifying the Location column (Categorical Data)
replace_column_values(df, 'Location', 'FARMINGTON', 'MAIN', 'HENRIETTA', 'GREECE', 'ERIE', 'IRONDEQUOIT', 'KENMORE',
                      'BUFFALO', 'ELMIRA')


# Filter dataframe for desired Blended Coverage
def blended_coverages(dataframe, min_coverage):
    dframe = dataframe.loc[dataframe['Blended Coverage'] < min_coverage]

    return dframe


# Filter by Location (in CAPITAL LETTERS) => 'FARMINGTON', 'MAIN', 'HENRIETTA', 'GREECE', 'ERIE', 'IRONDEQUOIT', 'KENMORE', 'BUFFALO', 'ELMIRA'
def get_location(dataframe, location):
    dframe = dataframe.loc[dataframe['Location'] == location]

    return dframe

# Define Success Parameters
def metrics(dataframe, vio_min, vista_min, region_min):
    dframe = dataframe.loc[(dataframe['Local Experian VIO'] >= vio_min) & (dataframe['Local Vista Demand'] >= vista_min) & (dataframe['Alliance DW Region'] >= region_min)]

    return dframe


def get_vehicle_years(dataframe, min_year, max_year):
    year_min = datetime.strptime(min_year, '%Y-%d-%m').date()
    year_max = datetime.strptime(max_year, '%Y-%d-%m').date()
    dframe = dataframe.loc[(dataframe['Min Model Year'] >= year_min) & (dataframe['Max Model Year'] >= year_max)]

    return dframe


def main(dataframe):
    # Criteria 1: Blended Coverage
    while True:

        try:
            user = int(input("What's your preferred Blended Coverage Percentage? (Enter an Integer):\n"))
            if type(user) == int:
                dframe = blended_coverages(dataframe, user)
                break
            print("\nPlease enter a valid input... ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)üëé")

        except Exception as e:
            print(e)

    # Criteria 2: Location
    while True:

        try:
            user = input("Please enter the location to filter by: ").upper()
            if user in ['FARMINGTON', 'MAIN', 'HENRIETTA', 'GREECE', 'ERIE', 'IRONDEQUOIT', 'KENMORE', 'BUFFALO', 'ELMIRA']:
                dframe = get_location(dataframe, user)
                break
            print("\nPlease try again... ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)üëé")

        except Exception as e:
            print(e)

    # Criteria 3: Metrics
    while True:

        try:
            user = input("Enter the minimum VIO, Local Vista , and Regional, respectfully. (Enter Integers only, separated by commas): \n")
            values = list(map(lambda i: int(i), user.split(',')))

            if (type(values[0]) == int) & (type(values[1]) == int) & (type(values[2]) == int):
                dframe = metrics(dataframe, values[0], values[1], values[2])
                break
            print("\nPlease try again... ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)üëé")

        except Exception as e:
            print(e)

    # Criteria 4: Min/Max Model Year
    while True:

        try:
            user1 = input("Minimum Model Year? (Format: YYYY): \n")
            user2 = input("Maximum Model Year? (Format: YYYY): \n")
            user1 = user1 + '-01-01'
            user2 = user2 + '-01-01'

            if (type(user1) == str) & (type(user2) == str):
                dframe = get_vehicle_years(dataframe, user1, user2)
                break
            print("\nOops... Something went wrong... ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)üëé")

        except Exception as e:
            print(e)

    return dframe


df = main(df)


